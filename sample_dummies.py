"""Dummy functions used by sample_tasks.py"""

import logging
import random
import time

logger = logging.getLogger(__name__)

# key constants for the shared dictionary
PROJECT_NAME = "project_name"
REPOSITORIES = "repositories"


def clone_main(SharedDict: dict):
    """Simulates cloning the main repositories.

    Reads the project name generated by an earlier task from the ShareDict.
    Writes the list of cloned projects to SharedDict."""
    logger.info(
        f"clone_main({SharedDict[PROJECT_NAME]}): Emulate cloning of main project repositories."
    )

    repos = ["my_project_core", "my_project_gui"]
    for repo in repos:
        logger.info(f"clone_main: clone {repo}")
        time.sleep(3)

    SharedDict[REPOSITORIES] = repos

    logger.info("clone_main: done.")


def clone_auxillary(SharedDict: dict):
    """Simulates cloning several auxillary repositories."""
    logger.info(
        f"clone_auxillary({SharedDict[PROJECT_NAME]}): Emulate cloning of auxillary repositories."
    )
    for i in range(5):
        logger.info(f"clone_remaining: clone helper {i + 1}")
        time.sleep(i + 1)
    logger.info("clone_remaining: done.")


def create_project_name(SharedDict: dict):
    """Creates a custom name for the project and stores it in SharedDict."""

    logger.info("create_project_name: Please wait, this may take a while ...")
    time.sleep(4)

    colors = ("Red", "Green", "Blue", "Violet", "Black", "White")
    shapes = ("Circle", "Square", "Triangle", "Rectangle")

    SharedDict["project_name"] = random.choice(colors) + random.choice(shapes)

    logger.info(
        f"create_project_name: The project is called {SharedDict[PROJECT_NAME]}"
    )


def build_binaries(SharedDict: dict):
    """Simulates building the binaries from source.

    Reads the repository names from SharedDict."""

    logger.info(
        f"build_binaries: Building binaries for project {SharedDict[PROJECT_NAME]}"
    )
    for repo in SharedDict[REPOSITORIES]:
        logger.info(f"build_binaries: processing repository {repo}")
        time.sleep(random.random() * 4.0)

    logger.info("build_binaries: finished.")
